#!/usr/bin/env nodejs
//
// This is Help50.
//
// David J. Malan
// malan@harvard.edu
//

// version
var VERSION = '1.0.0';

// endpoint
var ENDPOINT = 'https://help.cs50.net';

// modules
var argv = 
    require('../lib/node_modules/optimist').boolean(['d','h','v','c'])
    .alias('d', 'debug').alias('h', 'help').alias('v', 'version').alias('c', 'coupon').argv;
var async = require('../lib/node_modules/async');
var child_process = require('child_process');
var fs = require('fs');
var path = require('path');
var request = require('../lib/node_modules/request');
var _ = require('../lib/node_modules/underscore');

// -v, --version
if (argv.version === true) {
    process.stdout.write(VERSION + '\n');
    process.exit(0);
}

// -h, --help
if (argv.help === true) {
    process.stdout.write('Usage: help50 argv[0] [argv[1] ...]\n');
    process.exit(0);
}
else if (argv._.length < 2) {
    process.stdout.write('Usage: help50 argv[0] [argv[1] ...]\n');
    process.exit(1);
}

// TODO: run command, combining stdout and stderr, allow for stdin

// TODO: split output into lines

// help!
async.waterfall([

    // POST /
    function(callback) {

        // upload lines
        if (argv.debug === false) {
            process.stdout.write('Asking for help.');
        }
        var interval = setInterval(function() {
            if (argv.debug === false) {
                process.stdout.write('.');
            }
        }, 500);

        // TODO: use Express or what not to use gzip'd POST, include c9 username
        request.post({
            body: 'TODO',
            headers: {
                'Content-Length': buffer.length,
                'Content-Type': 'application/zip',
                'Content-Transfer-Encoding': 'binary'
            },
            uri: ENDPOINT + '/'
        }, function(err, response, body) {

            // handle response
            clearInterval(interval);
            if (err !== null) {
                return callback(err);
            }
            else if (response.statusCode === 503) {
                return callback(new Error('server is offline'));
            }

            // parse body
            try {
                var payload = JSON.parse(body);
            }
            catch (e) {
                return callback(e);
            }

            // TODO: decide on server's response format
            if (!_.isUndefined(payload.id)) {
                if (argv.debug === false) {
                    process.stdout.write('\33[2K\r');
                }
                return callback(null, payload);
            }
            else if (!_.isUndefined(payload.error)) {
                return callback(payload.error);
            }
            else {
                return callback(new Error('invalid response from server'));
            }
        });
    }

}], function(err, payload) {

    // TODO: decide which errors to handle
    // report results
    if (err !== null) {
        if (typeof err.code === 'undefined' || err.code === 'E_USAGE') {
            var message = err.message;
        }
        else {
            switch (err.code) {
                case 'ECONNREFUSED':
                    var message = 'could not reach server.';
                    break;

                case 'ECONNRESET':
                    var message = 'connection to server died.';
                    break;

                default:
                    var message = err.code + ' error.';

            }
        }
        process.stderr.write(' ' + message + '\n');
        process.exit(1);
    }
    else {

        // -d, --debug
        if (argv.debug === true) {
            process.stdout.write(JSON.stringify(payload, undefined, '  '));
            process.exit(0);
        }

        // TODO: iterate over results
        // iterate over results
        for (check in payload.results) {

            // report passed check in green
            if (payload.results[check].result === true) {

                // :)
                process.stdout.write('\033[32m'); // green
                process.stdout.write(':) ' + payload.results[check].description + '\n');
                process.stdout.write('\033[39m'); // default

            }

            // report failed dependency in yellow
            else if (payload.results[check].result === null) {

                // :|
                process.stdout.write('\033[33m'); // yellow
                process.stdout.write(':| ' + payload.results[check].description + '\n');
                process.stdout.write('\033[39m'); // default
                process.stdout.write('   \\ can\'t check until a frown turns upside down\n');

            }

            // report failed check in red
            else {

                // :(
                process.stdout.write('\033[31m'); // red
                process.stdout.write(':( ' + payload.results[check].description + '\n');
                process.stdout.write('\033[39m'); // default

                // check for error
                if (!_.isUndefined(payload.results[check].error)) {
                    process.stdout.write('   \\ ' + payload.results[check].error + '\n');
                    continue;
                }

                // check for script
                if (_.isUndefined(payload.results[check].script)) {
                    continue;
                }

                // mismatch is always at end of script
                var mismatch = payload.results[check].script[payload.results[check].script.length - 1];

                // prepare substring of actual stderr or stdout
                var substring;
                if (!_.isUndefined(mismatch.actual)) {
                    if (mismatch.actual.type === 'stderr' || mismatch.actual.type === 'stdout') {
                        var string = JSON.stringify(mismatch.actual.value);
                        substring = string.substring(0, 40);
                        if (substring.length < string.length) {
                            substring += '..."';
                        }
                    }
                }
            }
        }

        // diagnostics
        var url = ENDPOINT + '/' + id;
        process.stdout.write(url + '\n');
    }

    // helped!
    process.exit(0);

});
